{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPS-BoldMT;\f1\fmodern\fcharset0 CourierNewPSMT;\f2\fmodern\fcharset0 CourierNewPS-BoldItalicMT;
\f3\fmodern\fcharset0 CourierNewPS-ItalicMT;}
{\colortbl;\red255\green255\blue255;\red5\green68\blue254;\red74\green0\blue230;\red0\green0\blue0;
\red59\green0\blue164;}
{\*\expandedcolortbl;;\cssrgb\c0\c38136\c99824;\cssrgb\c36820\c18688\c92265;\cssrgb\c0\c0\c0;
\cssrgb\c30181\c13393\c70360;}
\paperw11900\paperh16840\margl1440\margr1440\vieww23360\viewh21300\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs96 \cf0 Author(Mr.Paul Hudson| Hacking with Swift) Youtube Video Link:\

\f1\b0 \
\cf2 \ul \ulc2 https://www.youtube.com/watch?v=8kiR_QsQNPc\cf0 \ulnone \
\

\f2\i\b 1)Generating class initialisers
\f1\i0\b0 \
				We can create Member-wise initialiser for class(is MoreUseful) Model or Struct Model using Refactor option. \
\
	
\f0\b \cf3 SELECT Class name -> REFACTOR -> GENERATE MEMBER-WISE INITIALISER
\f1\b0 \cf0 \
\

\f2\i\b 2)Environment overrides\

\f1\i0\b0 		Where we used to see the View Debugging Hierarchy, beside we can figure out this option. So, with help of this we can live rendering out the bigger font text and dark mode and light mode and grayscale and different testing possibility related to environment. We can easily debug and see the live output.\
\
	
\f0\b \cf3 RUN the App -> BOTTOM of the Xcode -> YOU will find Environment override option
\f1\b0 \cf0 \
\

\f2\i\b 3)Selecting blocks of code\
\

\f1\i0\b0 This is simply selecting a starting brace and Xcode will select and tells us where it ends.\
\
	
\f0\b \cf3 Select Starting brace of any function and DOUBLE tap it.\cf0 \
\

\f2\i 4)Checking your spelling\
\

\f1\i0\b0 Xcode is very smart at checking your spelling is correct. It clears typo errors on your double quotes. Like \'93Hello Wrold\'94.Here world spelling wrong. You can correct it by simply following steps\
\
	
\f0\b \cf3 SELECT Edit menu -> Format -> Spelling and Grammar -> Check Spelling While Typing
\f1\b0 \cf0 \
\
It can clearly highlight the word error on red colour underline. And you can simply right click and correct it or visualise the entire screen what and also the typos are presented.\
NOTE: Even it gives you an error when you are following camelCase properly also.\
Like: firstname => it should be firstName. Then you will easily catch an error.\

\f2\i\b \
5)Fixing all issues\

\f3\b0 \

\f1\i0 You may find this protocol does not confirm all the functions or variables. By the time, Xcode will give dotted red colour button. Where you tap on it, It will add needed functions or vars to the class. But what likewise if you are getting more errors. How to fix instantly all those.
\f3\i \
\
	
\f2\b \cf3 Editor -> Fix all issues. Boom. It will fix the entire errors on adding the missing functions and vars.\cf2 \
\
\cf4 6)Deleting Search Results
\f3\b0 \cf0 \

\f2\b \

\f1\i0\b0 Usually when we go for searching any file or text. It will list down the matches files. What if you are interested in them all. Just interested to some files. You can easily ignore the files which you don\'92t want tapping on backspace or delete option\
\
	
\f0\b \cf5 SEARCH any text on Xcode -> Select any of search result -> press backspace or delete option.
\f1\b0 \cf0  \
\
It will be removed from search results.\
\

\f0\b 7)Resuming the SwiftUI Canvas\
\

\f1\b0 Sometimes the canvas will get stuck when you make some changes in your code. By the time you will be able to see RESUME button on right side of screen. But easily you can do with help of shortcuts.
\f0\b  \
\
Option + Command + P -> Resume SwiftUI Canvas \
Option + Command + return -> Hide SwiftUI Canvas\
\
8)Tiling the Simulator\
\

\f1\b0 This is like people who wants to view the simulator and Xcode in one screen. So easily can do multitasking. \
\
Two ways you can achieve this, by doing full screening the Xcode and drag the Simulator merge into your full screen Xcode. So, automatically this can happen. Otherwise, \
\

\f0\b 	SELECT simulator -> Window -> Tile window to Right/Left of Screen
\f1\b0 \
\

\f0\b 9)	Expanding autocomplete\

\f1\b0 \
Xcode automatically gives you autocomplete on typing any code you like. But sometime it will be lengthier one as well. And in the tail of function you will see dot dot. So, here is the tip you can resize the autocompletion window by over drag it.\
\

\f0\b 10)Quickly toggling breakpoints\
\

\f1\b0 Enable and delete breakpoints is heavier work when you do with your mouse or trackpad. But using shortcut it much simpler.
\f0\b \
\
	COMMAND + BACKSLASH \{Toggle function to enable and disable\}
\f1\b0 \

\f2\i\b \

\f0\i0 11)Randomising test order\
\

\f1\b0 Usually we use to write a test function in ordered way. Because mostly the second test function may required to run the first function. But what if I want to run these in random order. Here is the tip:\
\

\f0\b PRODUCT -> Test -> Info -> Options -> (check)Randomise execution order
\f1\b0  \
\
This will run the test cases in random order. So it will give more confident on not depending with any order or function.
\f0\b \
\
12)Filtering the jump bar\
\

\f1\b0 Usually we use see the list of functions on vars when clicking method list. But if you have big list, you cannot simply scroll and see. In Xcode wherever you see the list, the hidden feature is SEARCH BAR is there. You start simply typing it and it immediately giving you the result.
\f0\b \
\
For ex: Xcode Target and Schemes\
\
13)Generating an Interface file\
\

\f1\b0 When you want to see the Class file interface what and a major functionalities are written. Unless otherwise you have go through the entire class then only you will come to know. How to see protocol kind of methods in a class. Xcode will help you easily using the shortcut.
\f0\b \
\
CONTROL + Command + UpArrow - To See Interface File\
\
CONTROL + Command + DownArrow - To See Interface and Implementation both.\
\
}